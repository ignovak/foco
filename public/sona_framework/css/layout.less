.sgrid_setup(984px, 12, 24px); // sets grid ty 12 columns, I usually use 960px or 984px with 24px gap for basik width

// TIPS
// .sgrid; to set grid, margin: 0 auto, .clearfix();
// .col();
// @unit*(1-12) eg: @unit*2 width equals .col(2) width +@gap;
// @rhythm line height variable
//
// .row() --- {.clearfix(); width: 100%;} wraps columns
// .clearfix();
// .left() --- {float: left;} floats colunt left
// .right() --- {margin-left: -5px; float: right;} floats colunt right
//
// Equal colums
// .equal_col_wrap(); --- { overflow: hidden; display:block; position:relative;}
// .equal_col() ---  { padding-bottom:32767px; margin-bottom:-32767px;}
// .equal_col_remove() --- { padding-bottom: 0; margin-bottom: 0;}
//
// Shift, prepend, append
// .shift_right(@count) --- {left: @count * @width / @columns; position:relative;},
// .shitf_left(@count)...
// Shifts column to `@count` units use it in pair with floats to swap columns
// .unshift() --- {left: 0; right: 0;} remove shift. Use it in mobile styles to remove shifts
//
// .prepend(@count, @fix: 0px) --- {margin-left: @count * @width / @columns + @fix;} margin left in columns
// .append(@count, @fix: 0px) --- {margin-fight: @count * @width / @columns + @fix;} margin right in columns
// .unprepend() --- {margin-left: 0;} .unappend() {margin-right: 0;}
//
// Pull, push, rize, sink
// .pull(@step, @fix: 0px) { margin-top: @step * @rhythm + @fix;}
// .push(@step, @fix: 0px) { margin-bottom: @step * @rhythm + @fix;}
// .rise(@step, @fix: 0px) { margin-top: - @step * @rhythm + @fix;}
// .sink(@step, @fix: 0px) { margin-bottom: - @step * @rhythm + @fix;}
//
// Fonts
// .type_body(); to fix text resizing of IE6 and IE7
// .fs(); for font size changes;
// font-family: 'WebSymbolsRegular'; nice font for icon replacement;
//
// .border_box
// .fl();
// .fr();
//
// Reset
// .list_reset();
// Decor
// .light_text_shadow(50%);
// .dark_text_shadow (@opacity:50%)
//
// Figures
// .triangle_right(color, colored side size, transparent side size) eg: .triangle_right(blue,10px,5px) or .triangle_right() - for triangle with default styles;
// .triangle_left, .triangle_up, .triangle_down;
// .triangle_left and .triangle_right have additional styles, such as { display: inline-block; vertical-align: 8%; padding-left: 4px; because now I usualy use this two triangles with such styles, but I'll separate this 3 styles in aditional mixin soon (if there will be such necessity)
//
// Sizing
// .size(5px,10px) = .size {height:5px; width:}
// CSS 3 samples
// We use Prefixr for CSS3 styles, so you need to type only oficial variant and vendor prefixes would be added automaticly. Eg:
// background-image: linear-gradient(top, #444444, #999999);
// box-shadow: 0px 0px 4px #ffffff;
// border-radius: 12px;
// text-shadow: 1px 1px 3px #888;
//
// transform: rotate(7.5deg);
// transition: all 0.3s ease-out;

// VARIARBLES
@triangle_color: #006000; // change but !!! dont delete
@semi_black: rgba(0,0,0,0.5);
@semi_white: rgba(255,255,255,0.5);

@sidebar_tumblr_bg: #349aff;

@gray_font_color: #4D4D4D;

@dev_bg_green_color: #81CB5C;

@dev_time_input_form_border_color: #4D4D4D;


.box_stylization {
//    box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3), -1px -1px 2px rgba(255, 255, 255, 0.2) inset, 1px 1px 1px rgba(0,0,0,0.1) inset;
    box-shadow: -1px 1px 2px rgba(0, 0, 0, 0.3), 1px -1px 2px rgba(255, 255, 255, 0.2) inset, -1px 1px 1px rgba(0, 0, 0, 0.1) inset;
	background-color: #E6E6E6;
}

.blue_button {
	border-radius: 6px;
	.fs(19px);
	line-height: @rhythm;
	padding: @rhythm/2 @gap;
	transition: all 0.1s linear 0s;
	background-image: linear-gradient(center top , #B5CDFC, #ABC6FC 10%, #93B6FB 90%, #75A2F9);
	border-color: #538BF8 #3174F7 #1360F5;
	border-style: solid;
	border-width: 1px;
	box-shadow: 0 1px 0 rgba(255, 255, 255, 0.2) inset, 0 1px 2px rgba(0, 0, 0, 0.1);
	color: #333333;
	cursor: pointer;
	display: inline-block;
	text-decoration: none;
	text-shadow: 0 1px 1px rgba(255, 255, 255, 0.75);
	margin-bottom: -2px;
}


// ----------------- MIXINS FOR BODY BG ------------------------
.radial_shadow_right_bg {
    position: relative;

    &:after {
        background-image: -moz-radial-gradient(640px 10px , circle , rgba(0, 0, 0, 0.2) 50px, rgba(255, 255, 255, 0) 500px);
        background-repeat: no-repeat;
        content: "";
        height: 600px;
        position: absolute;
        right: 0;
        top: 0;
        width: 600px;
        z-index: -1;
    }

    &:before {
        background-image: -moz-radial-gradient(410px 370px , circle , rgba(0, 0, 0, 0.2) 20px, rgba(255, 255, 255, 0) 300px);
        background-repeat: no-repeat;
        bottom: 0;
        content: "";
        height: 370px;
        position: absolute;
        right: 0;
        width: 370px;
        z-index: -1;
    }
}


// -------------------- HTML BG -----------------------
html, body {
    height: 100%;
}

.linear_sahdow_bg {
    background-image: linear-gradient(top, rgba(0, 0, 0, 0.1) 0%, rgba(255, 255, 255, 0) 9%, rgba(255, 255, 255, 0) 90%,  rgba(0, 0, 0, 0.2) 100%);
}

html {
    background-color: #f9f9f9;
//    .linear_sahdow_bg();
//    background-image: url('../images/pat/bg_pat_batthern.png');
//    background-image: url('../images/pat/bg_pat_graphy.png');
//    .radial_shadow_right_bg();
}

// /MIXINS AND VARIABLES!!!!!!!!!!!!!!!!!!!!!!!!

// RESET (addition to Normalise.css)
img {
	display: block;
}	

body {
  .type_body(); // changes body font size for IE6/7
}

// HEADER
.main_header_wrapper {
  height: @rhythm*4;
}

.main_header {
  .sgrid();
  padding-top: @rhythm*2;
}

.main_logo {
  .fs(32px);
  line-height: @rhythm*2;
	text-align: center;
}
// /HEADER

// NAV
.main_nav_list {
  .sgrid();
  padding: @rhythm 0; // for example: you can add padding in half of rhythm = padding: @rhythm/2, but in out case it would be better to use padding: 10px 0 11px; because @rhythm = 21px (basic.less); and different browsers can round 21px/2 differently

      // including li{} into .main_nav_list{} will give .main_nav_list li {}â€”this is less.js property
  li {
    display: inline;
  }
}

#skip-link {
  .nav_skip_link();
}
// /NAV

// CONTENT

.ind_content {
  .sgrid();
}

.ind_something_with_two_columns_in_it {
  .sgrid(); // column 2col wide
  .equal_col_wrap(); // wrap to make inner colums equal height

  article {
    .col(8); // column 2col wide
    .left();
    .shift_right(4);
  }

  aside {
    background-color: #eee;
    .col(4);
    .equal_col(); // set equal height to collums
    .left();
    .shitf_left(8);

    ul {
      .list_reset();
    }
  }
}
// /CONTENT

// FOOTER
.main_footer_wrapper {
  background-color: #ccc;
  margin-top: @rhythm*2;
}

.main_footer {
  .sgrid();
}
// /FOOTER
